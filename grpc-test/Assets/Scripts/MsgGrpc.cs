// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Protomsg {
  public static partial class Detector
  {
    static readonly string __ServiceName = "protomsg.Detector";

    static readonly grpc::Marshaller<global::Protomsg.Image> __Marshaller_protomsg_Image = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protomsg.Image.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protomsg.Detection> __Marshaller_protomsg_Detection = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protomsg.Detection.Parser.ParseFrom);

    static readonly grpc::Method<global::Protomsg.Image, global::Protomsg.Detection> __Method_detect_img = new grpc::Method<global::Protomsg.Image, global::Protomsg.Detection>(
        grpc::MethodType.Unary,
        __ServiceName,
        "detect_img",
        __Marshaller_protomsg_Image,
        __Marshaller_protomsg_Detection);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protomsg.MsgReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Detector</summary>
    [grpc::BindServiceMethod(typeof(Detector), "BindService")]
    public abstract partial class DetectorBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protomsg.Detection> detect_img(global::Protomsg.Image request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Detector</summary>
    public partial class DetectorClient : grpc::ClientBase<DetectorClient>
    {
      /// <summary>Creates a new client for Detector</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DetectorClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Detector that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DetectorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DetectorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DetectorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protomsg.Detection detect_img(global::Protomsg.Image request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return detect_img(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protomsg.Detection detect_img(global::Protomsg.Image request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_detect_img, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protomsg.Detection> detect_imgAsync(global::Protomsg.Image request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return detect_imgAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protomsg.Detection> detect_imgAsync(global::Protomsg.Image request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_detect_img, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DetectorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DetectorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DetectorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_detect_img, serviceImpl.detect_img).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DetectorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_detect_img, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Protomsg.Image, global::Protomsg.Detection>(serviceImpl.detect_img));
    }

  }
  public static partial class Tester
  {
    static readonly string __ServiceName = "protomsg.Tester";

    static readonly grpc::Marshaller<global::Protomsg.TestMsg> __Marshaller_protomsg_TestMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protomsg.TestMsg.Parser.ParseFrom);

    static readonly grpc::Method<global::Protomsg.TestMsg, global::Protomsg.TestMsg> __Method_test_grpc = new grpc::Method<global::Protomsg.TestMsg, global::Protomsg.TestMsg>(
        grpc::MethodType.Unary,
        __ServiceName,
        "test_grpc",
        __Marshaller_protomsg_TestMsg,
        __Marshaller_protomsg_TestMsg);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protomsg.MsgReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Tester</summary>
    [grpc::BindServiceMethod(typeof(Tester), "BindService")]
    public abstract partial class TesterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protomsg.TestMsg> test_grpc(global::Protomsg.TestMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Tester</summary>
    public partial class TesterClient : grpc::ClientBase<TesterClient>
    {
      /// <summary>Creates a new client for Tester</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TesterClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Tester that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TesterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TesterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TesterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protomsg.TestMsg test_grpc(global::Protomsg.TestMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return test_grpc(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protomsg.TestMsg test_grpc(global::Protomsg.TestMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_test_grpc, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protomsg.TestMsg> test_grpcAsync(global::Protomsg.TestMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return test_grpcAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protomsg.TestMsg> test_grpcAsync(global::Protomsg.TestMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_test_grpc, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TesterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TesterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TesterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_test_grpc, serviceImpl.test_grpc).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TesterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_test_grpc, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Protomsg.TestMsg, global::Protomsg.TestMsg>(serviceImpl.test_grpc));
    }

  }
}
#endregion
